{"version":3,"sources":["ThemeContext.tsx","components/icon/index.tsx","components/subtitle/index.tsx","components/text/index.tsx","components/title/index.tsx","components/toggle/index.tsx","App.tsx","index.tsx"],"names":["ThemeContext","createContext","theme","toggleTheme","console","log","Icon","href","type","Consumer","className","SubTitle","props","children","Text","Title","Toggle","onChange","value","onClick","classNames","App","useState","setTheme","isDarkTheme","Provider","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2NASaA,EAAeC,wBAAkC,CAC5DC,MAAO,OACPC,YAAa,kBAAMC,QAAQC,IAAI,Y,OCHpBC,EAAsB,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,KAC1C,OACE,cAACR,EAAaS,SAAd,UACG,gBAAGP,EAAH,EAAGA,MAAH,OACC,mBAAGK,KAAMA,EAAMG,UAAS,UAAKR,EAAL,gBAAxB,SACGM,QCXEG,EAAe,SAAAC,GAC1B,OAAO,oBAAIF,UAAU,YAAd,SAA2BE,EAAMC,YCD7BC,EAAW,SAAAF,GACtB,OAAO,mBAAGF,UAAU,OAAb,SAAqBE,EAAMC,YCAvBE,EAAY,SAAAH,GACvB,OACE,cAACZ,EAAaS,SAAd,UACG,gBAAGP,EAAH,EAAGA,MAAH,OAAe,oBAAIQ,UAAS,UAAKR,EAAL,iBAAb,SAAyCU,EAAMC,e,gBCExDG,EAA0B,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,MAClD,OACE,qBAAKR,UAAU,SAASS,QAASF,EAAjC,SACE,qBAAKP,UAAWU,IAAW,cAAe,CAAE,YAAaF,GAAS,CAAE,cAAeA,SCuB1EG,G,MA1BC,WACd,MAA0BC,mBAAgB,QAA1C,mBAAOpB,EAAP,KAAcqB,EAAd,KACMC,EAAwB,SAAVtB,EAEdC,EAAc,WACJoB,EAAdC,EAAuB,QAAoB,SAG7C,OACE,cAACxB,EAAayB,SAAd,CAAuBP,MAAO,CAAEhB,QAAOC,eAAvC,SACE,sBAAKO,UAAS,cAASR,EAAT,UAAd,UACE,cAAC,EAAD,2BACA,cAAC,EAAD,2BACA,qBAAKQ,UAAU,kBAAf,SACE,cAAC,EAAD,qIAEF,sBAAKA,UAAS,UAAKR,EAAL,qBAAd,UACE,cAAC,EAAD,CAAMM,KAAM,cAAC,IAAD,IAAYD,KAAK,mCAC7B,cAAC,EAAD,CAAMC,KAAM,cAAC,IAAD,IAAcD,KAAK,uEAEjC,cAAC,EAAD,CAAQW,MAAOM,EAAaP,SAAU,kBAAMd,cCvBpDuB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.7d3fe57a.chunk.js","sourcesContent":["import { createContext } from \"react\";\n\nexport type Theme = \"dark\" | \"light\";\n\nexport interface ThemeProviderProps {\n  theme: Theme;\n  toggleTheme: () => void;\n}\n\nexport const ThemeContext = createContext<ThemeProviderProps>({\n  theme: \"dark\",\n  toggleTheme: () => console.log(\"click\")\n});\n","import React, { FC, ReactElement } from \"react\";\nimport { ThemeContext } from \"../../ThemeContext\";\n\nexport interface IconProps {\n  href?: string;\n  type: ReactElement;\n}\n\nexport const Icon: FC<IconProps> = ({ href, type }) => {\n  return (\n    <ThemeContext.Consumer>\n      {({ theme }) => (\n        <a href={href} className={`${theme}-accent icon`}>\n          {type}\n        </a>\n      )}\n    </ThemeContext.Consumer>\n  );\n};\n","import React, { FC } from \"react\";\n\nexport const SubTitle: FC = props => {\n  return <h1 className=\"sub-title\">{props.children}</h1>;\n};\n","import React, { FC } from \"react\";\n\nexport const Text: FC = props => {\n  return <p className=\"text\">{props.children}</p>;\n};\n","import React, { FC } from \"react\";\nimport { ThemeContext } from \"../../ThemeContext\";\n\nexport const Title: FC = props => {\n  return (\n    <ThemeContext.Consumer>\n      {({ theme }) => <h1 className={`${theme}-accent title`}>{props.children}</h1>}\n    </ThemeContext.Consumer>\n  );\n};\n","import classNames from \"classnames\";\nimport React, { FC } from \"react\";\n\nexport interface ToggleProps {\n  onChange: () => void;\n  value: boolean;\n}\n\nexport const Toggle: FC<ToggleProps> = ({ onChange, value }) => {\n  return (\n    <div className=\"toggle\" onClick={onChange}>\n      <div className={classNames(\"toggle-ball\", { \"toggle-on\": value }, { \"toggle-off\": !value })} />\n    </div>\n  );\n};\n","import React, { FC, useState } from \"react\";\nimport { GitHub, Linkedin } from \"react-feather\";\nimport { Icon, SubTitle, Title, Text, Toggle } from \"./components\";\nimport \"./styles/index.scss\";\nimport { ThemeContext } from \"./ThemeContext\";\n\nexport type Theme = \"dark\" | \"light\";\n\nconst App: FC = () => {\n  const [theme, setTheme] = useState<Theme>(\"dark\");\n  const isDarkTheme = theme === \"dark\";\n\n  const toggleTheme = () => {\n    isDarkTheme ? setTheme(\"light\") : setTheme(\"dark\");\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n      <div className={`app ${theme}-theme`}>\n        <Title>Hello World,</Title>\n        <SubTitle>{`I'm Rachael.`}</SubTitle>\n        <div className=\"app-description\">\n          <Text>{`I'm an associate software developer at Sky. I started my coding journey through Sky's Get Into Tech program of 2020.`}</Text>\n        </div>\n        <div className={`${theme}-accent app-icons`}>\n          <Icon type={<GitHub />} href=\"https://github.com/rachaelhrlm\" />\n          <Icon type={<Linkedin />} href=\"https://www.linkedin.com/in/helen-rachael-malinowska-14b4581b4/\" />\n        </div>\n        <Toggle value={isDarkTheme} onChange={() => toggleTheme()} />\n      </div>\n    </ThemeContext.Provider>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}